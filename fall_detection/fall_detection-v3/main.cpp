#include <stdio.h>

#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

// Callback function declaration
static int get_signal_data(size_t offset, size_t length, float *out_ptr);

// Raw features copied from test sample (Edge Impulse > Model testing)
static float input_buf[] = {
    /* Paste your raw features here! */
-1.169, -9.400, -1.961, -0.791, -9.629, -1.927, -0.952, -9.782, -1.970, -0.569, -9.541, -2.649,  0.086, -9.347, -4.139, -0.136, -9.495, -3.546, -1.296,-10.182, -0.392, -1.267, -9.218, -0.509, -0.299, -8.680, -2.774,  0.280, -8.427, -2.606,  0.469, -8.788, -2.850,  1.000, -8.871, -2.434,  1.392, -9.409, -3.226,  1.389, -8.845, -3.549,  0.648, -8.331, -4.044, -0.555, -7.984, -3.910, -0.696, -7.893, -2.846, -0.256, -7.996, -2.554, -0.469, -7.001, -2.551, -1.078, -6.145, -2.221, -1.332, -6.234, -0.392, -0.923, -6.174,  0.882, -0.720, -5.454,  0.414, -0.163, -4.684, -1.435,  1.272, -6.703, -0.758,  1.404, -5.574, -0.485,  1.239, -4.077, -0.842,  0.825, -4.852, -0.799,  0.619, -7.917, -1.480,  2.372, -8.278, -1.631,  0.478, -5.777, -3.046,  0.476, -5.184, -1.368,  0.488, -7.991,  0.882,  1.767,-12.755,  2.934,  1.557,-12.059, -1.511,  0.641,-11.155, -3.147,  0.846, -9.352, -2.494, -1.569, -8.001, -1.045, -1.212,-12.599,  3.288, -0.918, -9.608,  1.545, -0.060, -9.462,  1.518,  3.984,-13.058,  0.206,  4.328,-15.746,  0.024, -1.401,-12.104,  0.354, -0.634,-14.978,  3.723,  2.288,-15.603,  0.708,  3.934,-15.964, -8.025,  4.395, -8.917,-14.811,  3.582,-11.492, -4.020,  2.724, -7.009,  6.600,  1.765,  6.961, 16.258, 18.613, -3.893,  0.031, 33.773,-30.165,-16.313, 22.190,-22.743, -6.210,  4.132, -1.162, 12.879,  0.772, -1.703, 10.825,  3.754, -3.482,  7.470,  4.484,  3.362,  2.752,  2.174,  6.652,  4.923,  6.035,  1.573,  4.383, 11.848, -0.605, -1.824, 12.300, -2.958, -5.352, 12.095, -1.380, -0.825,  8.407,-11.499, 16.100, 15.574,-21.107, -1.408, 19.120,-10.426,-14.904, 12.260, 11.363, -6.196,  4.120,  4.412, 13.407,  4.778,-14.060,  2.901, 17.389,-12.724,-13.104, 10.225, 11.810,  1.055,  6.389, 25.691,  3.252, 10.507,-27.994,  3.513, 15.593,-39.761,  2.762, 11.141,-22.406,-12.824,  0.502, -2.571, -4.127,  3.173, -3.087,  0.069,  1.638, -2.236,  2.798,  3.637,  0.191,  0.538,  7.382,  6.662, -3.505,  5.387, 11.755,  1.951,  4.888,  7.025,  4.620,  5.825,  0.904,  4.964,  7.229, -1.363,  5.650,  6.958,  0.782,  5.019,  7.315,  3.333,  4.412,  8.199,  4.154,  3.424,  9.742,  1.451,  4.637, 10.041,  1.275,  6.504,  9.859,  2.011,  6.547,  9.467,  1.325,  4.610, 11.726, -2.712,  2.807, 12.162, -3.766,  2.626,  9.216, -0.626,  1.640,  9.974,  1.566, -0.153, 10.550,  1.035,  0.263,  9.476, -1.557,  1.394,  9.304, -3.642,  0.084, 10.617, -4.842, -2.527, 10.574, -3.874, -1.997,  8.972, -2.834, -1.253,  7.791, -2.901,  0.019,  9.565, -4.682, -2.116,  9.672, -5.672, -0.421,  8.252, -5.624,  5.304,  8.577, -4.063,  6.394,  8.520, -3.840,  3.350,  7.140, -4.880,  1.693,  6.999, -6.535,  2.140,  8.061, -6.966,  3.156,  6.796, -4.773,  2.592,  5.954, -3.522,  0.794,  5.983, -4.242,  2.040,  5.913, -4.974,  2.508,  5.373, -5.457,  3.254,  5.854, -6.198,  4.648,  6.188, -5.313,  3.769,  6.743, -5.146,  3.092,  6.129, -5.820,  3.718,  5.882, -5.899,  5.191,  5.481, -5.956,  5.516,  6.246, -5.765,  5.251,  6.545, -6.590,  3.266,  6.681, -6.624,  1.741,  6.573, -6.557,  1.530,  5.966, -7.960,  3.580,  5.832, -8.003,  2.401,  5.820, -6.827,  1.951,  5.550, -5.995,  1.411,  4.699, -6.356,  2.716,  5.029, -7.685,  3.087,  5.691,-10.163,  3.032,  5.789,-10.725,  3.011,  5.677,-11.188,  3.030,  6.066,-11.827,  2.037,  6.186,-11.086,  0.454,  5.478, -9.768,  0.830,  5.172, -9.118,  1.346,  4.895, -8.910,  2.183,  4.625,-10.330,  2.626,  4.957,-10.612,  1.865,  5.198,-10.242, -0.024,  5.055,-10.275,  0.017,  4.596,-10.684,  0.206,  3.965,-11.011, -0.055,  3.302,-11.578,  0.873,  3.037,-11.064,  0.684,  3.400,-11.026,  1.095,  3.527, -9.873,  1.753,  3.407, -7.795,  1.440,  3.329, -6.934,  1.095,  3.403, -6.827,  1.162,  2.846, -8.003,  2.162,  2.836, -7.602,  2.267,  2.630, -6.887,  1.105,  3.785, -6.604, -0.598,  3.161, -7.724,  0.395,  2.924, -6.552, -0.153,  2.549, -6.023,  0.036,  2.637, -7.566,  0.897,  3.391,-10.323,  1.148,  3.824,-10.392,  0.253,  3.405, -8.486, -0.093,  3.462, -8.795, -0.146,  2.865, -9.118, -0.198,  2.329,-10.230,  1.040,  1.920,-10.567,  2.236,  1.576,-10.155,  1.652,  1.848,-10.163,  0.703,  1.942,-10.036,  0.526,  1.858, -9.546,  1.313,  1.616, -9.957,  1.451,  1.875,-10.261,  1.657,  2.111,-11.471,  1.612,  2.351,-11.346,  0.956,  2.202,-10.301,  0.945,  2.217, -9.782,  1.145,  2.384, -9.935,  1.569,  2.640, -9.945,  1.681,  2.769, -9.297,  1.253,  1.722, -7.963,  1.291,  2.264,-10.411,  1.535,  2.793, -7.893,  1.014,  2.626, -8.867,  1.889,  2.857, -9.677,  2.162,  3.001, -9.235,  2.054,  2.657, -8.405,  1.798,  2.604, -8.132,  1.688,  2.597, -8.240,  1.416,  2.602, -8.790,  1.425,  2.575, -9.371,  1.282,  2.281, -9.505,  2.119,  1.903, -9.113,  2.783,  1.643, -8.867,  3.202,  1.669, -9.034,  2.994,  1.741, -9.132,  2.798,  1.805, -8.654,  2.747,  1.793, -8.355,  2.664,  1.734, -8.788,  3.054,  1.968, -9.414,  3.288};

int main(int argc, char **argv) {

    signal_t signal;            // Wrapper for raw input buffer
    ei_impulse_result_t result; // Used to store inference output
    EI_IMPULSE_ERROR res;       // Return code from inference

    // Calculate the length of the buffer
    size_t buf_len = sizeof(input_buf) / sizeof(input_buf[0]);

    // Make sure that the length of the buffer matches expected input length
    if (buf_len != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        printf("ERROR: The size of the input buffer is not correct.\r\n");
        printf("Expected %d items, but got %d\r\n",
                EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE,
                (int)buf_len);
        return 1;
    }

    // Assign callback function to fill buffer used for preprocessing/inference
    signal.total_length = EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
    signal.get_data = &get_signal_data;

    // Perform DSP pre-processing and inference
    res = run_classifier(&signal, &result, false);

    // Print return code and how long it took to perform inference
    printf("run_classifier returned: %d\r\n", res);
    printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
            result.timing.dsp,
            result.timing.classification,
            result.timing.anomaly);

    // Print the prediction results (object detection)
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    printf("Object detection bounding boxes:\r\n");
    for (uint32_t i = 0; i < EI_CLASSIFIER_OBJECT_DETECTION_COUNT; i++) {
        ei_impulse_result_bounding_box_t bb = result.bounding_boxes[i];
        if (bb.value == 0) {
            continue;
        }
        printf("  %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\r\n",
                bb.label,
                bb.value,
                bb.x,
                bb.y,
                bb.width,
                bb.height);
    }

    // Print the prediction results (classification)
#else
    printf("Predictions:\r\n");
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        printf("  %s: ", ei_classifier_inferencing_categories[i]);
        printf("%.5f\r\n", result.classification[i].value);
    }
#endif

    // Print anomaly result (if it exists)
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    printf("Anomaly prediction: %.3f\r\n", result.anomaly);
#endif

    return 0;
}

// Callback: fill a section of the out_ptr buffer when requested
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
    for (size_t i = 0; i < length; i++) {
        out_ptr[i] = (input_buf + offset)[i];
    }

    return EIDSP_OK;
}
