#include <stdio.h>

#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

// Callback function declaration
static int get_signal_data(size_t offset, size_t length, float *out_ptr);

// Raw features copied from test sample (Edge Impulse > Model testing)
static float input_buf[] = {
    /* Paste your raw features here! */
    -1.3024, -9.6534, -2.5283, -1.2258, -9.4236, -2.4900, -1.5706, -9.6917, -2.4517, -1.9537, -9.5768, -2.1835, -2.2984, -9.3470, -2.1069, -2.5666, -9.5002, -1.8004, -2.6432, -9.1937, -1.8771, -2.3750, -9.0788, -1.6089, -2.9497, -9.3853, -1.2258, -3.6775, -9.2703, -1.2258, -3.6392, -8.7724, -0.9960, -4.9033, -8.5425, -1.0343, -4.7118, -8.3893, -0.8811, -5.3247, -8.1977, -0.7278, -5.6695, -7.1635, -0.7661, -5.3630, -7.0485, -1.3408, -7.0485, -6.0525, -1.9920, -7.6998, -5.9759, -1.7238, -8.3893, -5.1332, -1.9154, -8.3510, -4.6352, -2.3750, -8.0445, -3.9073, -2.4517, -7.3550, -3.1412, -2.2984, -5.8610, -1.3408, -2.3367, -5.4779, -1.7238, -4.3670, -10.6877, 8.8873, -9.6534, -12.1817, 3.6009, -8.4276, -3.5243, 2.4517, -3.7541, -18.9238, 16.1656, -3.9073, -5.0566, 8.7340, -0.8428, -0.0383, 2.9113, 1.4174, -5.4396, 9.0405, 2.7581, -6.6655, 7.3167, 3.4477, 1.6472, 2.1452, 7.8530, 3.5243, -0.8045, 14.7866, 2.1452, -4.1755, 15.2463, -0.5363, -5.3630, 11.1857, -1.8387, -1.5323, 6.9719, -4.2521, -2.7198, 6.3207, -6.1675, -2.3750, 7.2018, -7.3550, -3.3327, 6.8570, -5.8993, -4.0989, 7.0102, -4.6352, -3.3710, 7.5082, -4.8650, -4.6352, 6.9719, -3.7924, -3.5626, 7.2401, -7.0868, -3.1412, 8.8107, -7.1251, -1.6855, 4.7501, -7.4316, -2.1835, 4.5203, -8.0445, -3.1412, 4.1755, -9.1554, -2.9113, 4.5969, -8.6191, -1.1875, 4.5969, -9.0022, -1.4174, 4.0606, -8.6574, -0.8045, 4.4053, -8.2361, -0.8428, 5.2098, -8.0828, -0.9194, 5.3630, -7.6998, -1.1875, 5.3630, -7.9296, -1.3408, 5.2864, -7.7381, -1.6855, 5.2481, -7.8147, -1.7238, 5.3247, -7.8147, -2.0303, 5.2481, -7.9679, -1.6855, 5.3247, -8.0445, -1.7238, 5.1715, -8.0828, -1.4940, 5.0949, -8.0828, -1.2641, 5.1332, -8.0445, -1.3408, 4.9033, -7.9679, -1.4940, 5.1332, -8.1211, -1.2641, 5.0566, -7.9679, -1.2641, 5.1332, -8.0445, -1.3791, 5.0949, -7.9296, -1.4174, 5.1715, -8.0445, -1.4174, 5.1715, -7.9296, -1.4940, 5.1715, -8.0062, -1.6089, 5.1715, -8.0445, -1.3791, 5.1715, -8.1211, -1.3408, 5.2481, -7.8530, -1.3791, 5.1332, -7.9679, -1.3024, 5.0949, -8.0062, -1.3408, 5.0949, -8.0445, -1.4940, 5.2481, -8.0062, -1.3408, 5.0949, -8.0445, -1.3791, 5.2098, -7.9296, -1.3408, 5.2098, -7.9679, -1.3408, 5.1332, -7.9679, -1.4174, 5.1715, -8.0062, -1.2641, 5.1715, -8.0445, -1.4174, 5.2098, -8.0062, -1.2641, 5.1715, -8.0062, -1.3791, 5.1332, -8.0828, -1.3791, 5.0949, -8.0062, -1.3024, 5.1715, -8.0062, -1.4174, 5.1332, -8.0445, -1.3791, 5.4396, -8.0062, -1.3408, 5.3630, -7.8530, -1.3024, 5.2864, -8.0445, -1.3791, 5.1332, -8.0062, -1.3024, 5.1332, -8.0445, -1.4174, 5.2481, -7.9679, -1.0343, 5.2098, -8.0445, -1.3791, 5.3247, -7.9296, -1.1875, 5.2481, -8.1211, -0.8045, 5.2098, -8.2361, -1.1109, 4.9799, -8.1977, -0.8811, 4.9799, -8.0828, -0.9194, 5.0566, -8.2744, -1.0726, 5.0182, -8.1594, -0.8811, 5.2481, -8.1211, -0.7661, 4.9799, -8.1977, -0.8811, 5.0949, -8.1594, -0.7661, 4.9033, -8.1211, -0.8811, 5.0182, -8.1594, -0.4980, 5.4396, -8.1594, -0.8428, 5.2481, -8.1977, -0.8811, 5.0566, -8.1594, -0.8045, 5.0949, -8.1211, -0.9577, 5.1715, -8.1211, -0.8428, 5.0949, -8.0828, -1.0343, 5.0566, -8.1594, -0.9577, 5.2098, -8.0828, -1.1492, 5.2481, -8.0828, -1.0343, 5.1715, -7.9679, -1.1492, 5.1332, -8.0828, -1.0343, 5.0566, -8.0828, -1.0726, 5.1715, -8.0062, -1.0726, 5.2864, -8.1211, -1.0726, 5.3630, -7.9296, -0.9960, 5.2098, -7.9296, -1.1109, 5.4013, -8.1977, -0.9960, 5.2481, -8.0828, -1.0343, 5.1332, -8.0445, -0.9960, 5.1715, -8.0828, -0.9577, 5.1715, -8.0062, -0.9194, 5.3630, -8.0062, -0.9577, 5.2864, -8.0828, -1.0343, 5.4013, -7.9296, -0.8428, 5.1715, -7.9679, -1.1492, 5.2864, -8.0445, -1.0343, 5.3247, -8.0062, -1.0343, 5.2098, -7.9296, -1.0726, 5.2481, -7.9296, -1.1109, 5.5162, -7.9296, -1.0726, 5.4396, -7.9296, -1.1875, 5.1715, -8.0062, -1.1492, 5.2098, -7.9296, -1.1109, 5.2481, -8.0828, -1.0343, 5.2864, -8.0828, -0.8811, 5.4013, -8.0062, -1.0726, 5.2864, -7.9679, -1.3024, 5.2098, -7.9296, -1.1492, 5.2864, -7.9679, -1.1875, 5.2098, -8.0062, -1.0726, 5.3630, -8.0062, -0.9960, 5.2098, -8.0062, -1.2641, 5.2098, -8.0445, -1.3024, 5.4013, -8.0828, -1.0343, 5.0949, -7.9679, -1.1492, 5.0182, -7.9679, -1.3024, 5.2481, -8.0445, -1.1875, 5.1332, -7.9679, -1.3024, 5.0949, -8.0062, -1.2641, 5.0566, -8.0062, -1.4940, 5.2864, -8.0445, -0.9960, 5.0949, -8.0445, -1.1875, 5.2864, -8.0828, -0.9577, 5.2098, -8.3127, -0.9194, 5.2481, -8.0828, -0.9577, 5.1332, -8.1594, -0.9577, 5.2481, -8.1594, -1.1109, 5.2098, -8.0062, -1.1109, 5.0949, -8.1211, -0.8428, 5.0566, -8.1977, -0.9194, 5.1332, -8.1211, -0.9577, 5.0949, -7.9679, -0.9960, 5.1715, -8.1594, -1.1109, 5.1332, -8.0062, -0.9577, 5.2098, -8.1211, -1.0726, 5.2481, -8.0828, -0.9577, 5.3247, -7.9296, -0.9960, 5.2864, -8.0828, -1.1109, 5.3630, -8.0062, -1.1492, 5.1715, -8.0445, -1.0343, 5.3630, -7.8913, -1.0343, 5.2864, -7.9296, -1.1109, 5.3247, -7.9296, -1.1109, 5.2864, -7.8913, -1.1492, 5.3247, -7.8913, -1.0726, 5.3630, -8.0828, -0.8811, 5.2864, -8.0445, -0.8045, 5.2481, -8.0062, -0.8428, 5.2864, -8.0828, -0.8045, 5.0566, -8.0445, -1.0726, 5.0566, -8.0062, -0.9960, 5.4013, -8.0445, -1.1109, 5.3247, -7.8530, -1.1875, 5.2481, -7.9679, -1.1875, 5.2481, -8.0445, -1.1875, 5.3630, -8.1211, -1.1492, 5.2481, -7.9296, -1.3791, 5.1715, -8.1211, -1.1109, 5.0949, -7.9679, -1.3024, 5.2481, -8.0445, -1.3024, 5.2864
};

int main(int argc, char **argv) {

    signal_t signal;            // Wrapper for raw input buffer
    ei_impulse_result_t result; // Used to store inference output
    EI_IMPULSE_ERROR res;       // Return code from inference

    // Calculate the length of the buffer
    size_t buf_len = sizeof(input_buf) / sizeof(input_buf[0]);

    // Make sure that the length of the buffer matches expected input length
    if (buf_len != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        printf("ERROR: The size of the input buffer is not correct.\r\n");
        printf("Expected %d items, but got %d\r\n",
                EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE,
                (int)buf_len);
        return 1;
    }

    // Assign callback function to fill buffer used for preprocessing/inference
    signal.total_length = EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
    signal.get_data = &get_signal_data;

    // Perform DSP pre-processing and inference
    res = run_classifier(&signal, &result, false);

    // Print return code and how long it took to perform inference
    printf("run_classifier returned: %d\r\n", res);
    printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
            result.timing.dsp,
            result.timing.classification,
            result.timing.anomaly);

    // Print the prediction results (object detection)
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    printf("Object detection bounding boxes:\r\n");
    for (uint32_t i = 0; i < EI_CLASSIFIER_OBJECT_DETECTION_COUNT; i++) {
        ei_impulse_result_bounding_box_t bb = result.bounding_boxes[i];
        if (bb.value == 0) {
            continue;
        }
        printf("  %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\r\n",
                bb.label,
                bb.value,
                bb.x,
                bb.y,
                bb.width,
                bb.height);
    }

    // Print the prediction results (classification)
#else
    printf("Predictions:\r\n");
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        printf("  %s: ", ei_classifier_inferencing_categories[i]);
        printf("%.5f\r\n", result.classification[i].value);
    }
#endif

    // Print anomaly result (if it exists)
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    printf("Anomaly prediction: %.3f\r\n", result.anomaly);
#endif

    return 0;
}

// Callback: fill a section of the out_ptr buffer when requested
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
    for (size_t i = 0; i < length; i++) {
        out_ptr[i] = (input_buf + offset)[i];
    }

    return EIDSP_OK;
}
